type Query {
  application(appName: String!): Application
}

type Application {
  uid: String!
  name: String!
  account: String!
  environments: [Environment!]!
}

type Environment {
  name: String!
  resources: [Resource!]!
  constraints: [Constraint!]!
  artifacts: [Artifact!]!
  # TODO: add this once Rob's versioning lands
  #  version: String
  #  history: [EnvironmentState!]
}

type EnvironmentState {
  version: String!
  resources: [Resource!]
  constraints: [Constraint!]
}

type Artifact {
  name: String!
  type: String! # Convert to a set of Strings
  reference: String!
  versions: [ArtifactVersion!]
  resource: Resource
}

type ArtifactVersion {
  createAt: String

}

type Resource {
  id: String!
  kind: String! # Convert to a set of Strings
  status: String # Convert to a set of Strings
  artifact: Artifact

#  isPaused: Boolean!
#  displayName: String
  location: Location
  moniker: Moniker
}

type Moniker {
  app: String!
  stack: String
  detail: String
}

type Location {
    regions: [String!]
}

enum TaskStatus {
  NOT_EVALUATED
  PENDING
  PASS
  FAIL
  OVERRIDE_PASS
  OVERRIDE_FAIL
}

type Constraint {
  type: String!
  status: TaskStatus
  startedAt: String
  judgedAt: String
  judgedBy: String
  comment: String
}

type Verification {
  id: String!
  type: String!
  status: TaskStatus
  startedAt: String
  completedAt: String
  link: String
}
